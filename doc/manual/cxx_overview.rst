Tour of the C++ Interface
=========================

There are two main objects in exact-real. Modules, defined in :doc:`module.hpp
<cxx_module>`, and their elements, defined in :doc:`element.hpp <cxx_element>`.

To work with exact-real, you first need to select a coefficient ring over which
your module will live. Currently implemented are the
:cpp:class:`ring of integers <exactreal::IntegerRing>`, the
:cpp:class:`field of rationals <exactreal::RationalField>`, and real-embedded
:cpp:class:`number fields <exactreal::NumberField>`.

To create a module over this coefficient ring, you need to select generators
for your module. The most important such generators are a fixed
:cpp:func:`rational number <exactreal::RealNumber::rational>` such as 1 and
:cpp:func:`random transcendental numbers <exactreal::RealNumber::random>`.

Once a coefficient ring and the generators have been selected, elements can be
created and arithmetic with them can be performed.

Example
-------

We want to construct a module over the field of rational real numbers.  We
include the required headers and create our coefficient ring:

.. code-block:: cpp

    #include <exact-real/rational_field.hpp>
    #include <exact-real/real_number.hpp>
    #include <exact-real/module.hpp>
    #include <exact-real/element.hpp>

    exactreal::RationalField Q;

We fix our generators, one is a :cpp:func:`random real number
<exactreal::RealNumber::random>` in the interval (0, 1).

.. code-block:: cpp

    auto a = exactreal::RealNumber::rational(1);
    auto b = exactreal::RealNumber::random();

We construct the :cpp:class:`module <exactreal::Module>` generated by these
reals:

.. code-block:: cpp

    auto M = exactreal::Module<exactreal::RationalField>::make({a, b}, Q);

We construct some :cpp:class:`elements <exactreal::Element>` in this module, namely
its :cpp:func:`generators <exactreal::Module::gen>`:

.. code-block:: cpp

    auto x = M->gen(0);
    auto y = M->gen(1);

We perform some arithmetic in this module:

.. code-block:: cpp

    std::cout << 2*x;
    // -> 2

    y + x - y == x
    // -> true

Note that we can also :cpp:func:`multiply elements
<exactreal::Element::operator*=>`, however the result then typically lives in a
larger module:

.. code-block:: cpp

    (y * y).module() == M
    // -> false

:cpp:func:`Divisions <exactreal::Element::truediv>` are supported when the
result can be determined exactly:

.. code-block:: cpp

    (y * y).truediv(y) == y
    // -> true

Otherwise, only :cpp:func;`floor division <exactreal::Element::floordiv>` is
possible:

.. code-block:: cpp

    x.floordiv(y) >= 1
    // -> true
