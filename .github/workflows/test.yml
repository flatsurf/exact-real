name: Test
on:
  push: { branches: [ "master" ] }
  pull_request: { branches: [ "master" ] }
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-libexactreal:
    runs-on: ${{ matrix.on }}
    strategy:
      matrix:
        include:
          - on: ubuntu-20.04
          - on: ubuntu-20.04
            sanitizer: address
          # Needs https://github.com/wbhart/flint2/pull/992
          # - on: ubuntu-20.04
          #   sanitizer: undefined
          - on: ubuntu-20.04
            sanitizer: valgrind
          - on: macos-10.15
          - on: macos-10.15
            sanitizer: address
          # Needs https://github.com/wbhart/flint2/pull/992
          # - on: macos-10.15
          #   sanitizer: undefined
    steps:
      - uses: actions/checkout@v2
        with: { submodules: recursive }
      - name: build flags
        id: flags
        run: |
          echo "::set-output name=configure::"`[[ ${{ runner.os }} == "Linux" ]] && echo "--with-version-script"` `[[ "${{ matrix.sanitizer }}" == "address" || "${{ matrix.sanitizer }}" == "undefined" ]] && echo "--without-byexample"` `[[ "${{ matrix.sanitizer }}" == "valgrind" ]] && echo "--enable-valgrind"`
          echo "::set-output name=shared::"`[[ "${{ matrix.sanitizer }}" == "address" ]] && echo "-fsanitize=address -fno-sanitize-recover -fno-omit-frame-pointer"` `[[ "${{ matrix.sanitizer }}" == "undefined" ]] && echo "-fsanitize=undefined -fno-sanitize-recover -fno-omit-frame-pointer"` `[[ "${{ matrix.on }}" == "macos-10.15" ]] && [[ "${{ matrix.sanitizer }}" == "address" || "${{ matrix.sanitizer }}" == "undefined" ]] && echo "-Wl,-undefined,dynamic_lookup"`
      - uses: conda-incubator/setup-miniconda@v2
        with: { mamba-version: "*", channels: "conda-forge", channel-priority: true }
      - name: install valgrind
        shell: bash -l {0}
        run: |
          sudo apt update
          sudo apt install -y libc6-dbg
          mamba install valgrind
        if: ${{ matrix.sanitizer == 'valgrind' }}
      - name: install dependencies
        shell: bash -l {0}
        run: |
          mamba env update --quiet -n test -f libexactreal/environment.yml
          conda list
      - name: configure & build & test
        shell: bash -l {0}
        run: |
          echo "::group::bootstrap"
          cd libexactreal
          ./bootstrap

          echo "::group::configure"
          export CXXFLAGS="$CXXFLAGS -UNDEBUG -g3 -fvisibility=hidden -fvisibility-inlines-hidden"
          # conda puts an explicit -std=c++14 on the command line on macOS, we override it here:
          export CXXFLAGS="$CXXFLAGS ${{ steps.flags.outputs.shared }} -std=c++17"
          export LDFLAGS="$LDFLAGS ${{ steps.flags.outputs.shared }}"
          ./configure --prefix="$PREFIX" --without-benchmark --without-doc ${{ steps.flags.outputs.configure }}

          echo "::group::make"
          make V=1

          echo "::group::test"
          make V=1 `[[ "${{ matrix.sanitizer }}" == "valgrind" ]] && echo check-valgrind || echo check` VALGRIND_SUPPRESSIONS_FILES=`pwd`/../tools/valgrind/conda.supp
      - uses: flatsurf/actions/show-logs@main
        if: ${{ always() }}
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
        if: ${{ failure() && github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
  test-pyexactreal:
    runs-on: ${{ matrix.on }}
    strategy:
      matrix:
        include:
          - on: ubuntu-20.04
            python: "3.6"
          - on: ubuntu-20.04
            python: "3.7"
          - on: ubuntu-20.04
            python: "3.8"
          - on: ubuntu-20.04
            python: "3.9"
          # Needs libsanitizer=11, with the default sanitizer, we get "Failed to mmap".
          # - on: ubuntu-20.04
          #   python: "3.9"
          #   sanitizer: address
          # Needs https://github.com/wbhart/flint2/pull/992
          # - on: ubuntu-20.04
          #   python: "3.9"
          #   sanitizer: undefined
          - on: ubuntu-20.04
            python: "3.9"
            sanitizer: valgrind
          - on: macos-10.15
            python: "3.6"
          - on: macos-10.15
            python: "3.7"
          - on: macos-10.15
            python: "3.8"
          - on: macos-10.15
            python: "3.9"
          # libtool strips -shared-asan from LDFLAGS but this is required to preload asan when building with clang
          # - on: macos-10.15
          #   python: "3.9"
          #   sanitizer: address
          # Needs https://github.com/wbhart/flint2/pull/992
          # - on: macos-10.15
          #   python: "3.9"
          #   sanitizer: undefined
    steps:
      - uses: actions/checkout@v2
        with: { submodules: recursive }
      - name: build flags
        id: flags
        run: |
          echo "::set-output name=configure::"`[[ ${{ runner.os }} == "Linux" ]] && echo "--with-version-script"` `[[ "${{ matrix.sanitizer }}" == "valgrind" ]] && echo "--enable-valgrind"`
          echo "::set-output name=shared::"`[[ "${{ matrix.sanitizer }}" == "address" ]] && echo "-fsanitize=address -fno-sanitize-recover -fno-omit-frame-pointer"` `[[ "${{ matrix.sanitizer }}" == "undefined" ]] && echo "-fsanitize=undefined -fno-sanitize-recover -fno-omit-frame-pointer"` `[[ "${{ matrix.on }}" == "macos-10.15" ]] && [[ "${{ matrix.sanitizer }}" == "address" || "${{ matrix.sanitizer }}" == "undefined" ]] && echo "-Wl,-undefined,dynamic_lookup"`
      - uses: conda-incubator/setup-miniconda@v2
        with: { mamba-version: "*", channels: "conda-forge", python-version: "${{ matrix.python }}", channel-priority: true }
      - name: install valgrind
        shell: bash -l {0}
        run: |
          sudo apt update
          sudo apt install -y libc6-dbg
          mamba install valgrind
        if: ${{ matrix.sanitizer == 'valgrind' }}
      - name: install dependencies
        shell: bash -l {0}
        run: |
          mamba env update --quiet -n test -f libexactreal/environment.yml
          mamba env update --quiet -n test -f pyexactreal/environment.yml
          conda list
      - name: configure & build & test
        shell: bash -l {0}
        run: |
          echo "::group::bootstrap"
          ./bootstrap

          echo "::group::configure"
          export CXXFLAGS="$CXXFLAGS -UNDEBUG -g3 -fvisibility=hidden -fvisibility-inlines-hidden ${{ steps.flags.outputs.shared }}"
          export LDFLAGS="$LDFLAGS ${{ steps.flags.outputs.shared }}"
          # conda puts an explicit -std=c++14 on the command line on macOS, we override it here:
          export CXXFLAGS="$CXXFLAGS -std=c++17"
          # similarly cppyy on macOS seems to default to C++14, https://github.com/conda-forge/cppyy-feedstock/issues/21
          export EXTRA_CLING_ARGS="-UNDEBUG -O2 -std=c++17"
          if [[ "${{ matrix.sanitizer }}" == "address" || "${{ matrix.sanitizer }}" == "undefined" ]]; then
            # Since the application (Python) has not been built with asan, we need to preload it explicitly.
            export EXACTREAL_LD_PRELOAD=$(gcc -print-file-name=libasan.so)
            export EXACTREAL_DYLD_INSERT_LIBRARIES=$(clang -print-file-name=libclang_rt.asan-x86_64.so)
            # Leak detection reports too many false positives in Python; they disabled it in their CI actually.
            export ASAN_OPTIONS=detect_leaks=0
            # https://bitbucket.org/wlav/cppyy/issues/367/address-sanitizer-reports-a-alloc-dealloc
            export ASAN_OPTIONS="$ASAN_OPTIONS:alloc_dealloc_mismatch=0"
          fi
          ./configure --prefix="$PREFIX" --without-benchmark --without-doc ${{ steps.flags.outputs.configure }}

          echo "::group::make"
          make V=1

          echo "::group::test"
          cd pyexactreal
          make V=1 `[[ "${{ matrix.sanitizer }}" == "valgrind" ]] && echo check-valgrind || echo check` VALGRIND_SUPPRESSIONS_FILES=`pwd`/../tools/valgrind/conda.supp
      - uses: flatsurf/actions/show-logs@main
        if: ${{ always() }}
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
        if: ${{ failure() && github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
  distcheck:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with: { submodules: recursive }
      - uses: conda-incubator/setup-miniconda@v2
        with: { mamba-version: "*", channels: "conda-forge", channel-priority: true }
      - name: install dependencies
        shell: bash -l {0}
        run: |
          mamba env update --quiet -n test -f libexactreal/environment.yml
          mamba env update --quiet -n test -f pyexactreal/environment.yml
          mamba env update --quiet -n test -f doc/environment.yml
          conda list
      - name: make distcheck
        shell: bash -l {0}
        run: |
          ./bootstrap
          ./configure --prefix="$PREFIX"
          make distcheck
      - uses: flatsurf/actions/show-logs@main
        if: ${{ always() }}
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
        if: ${{ failure() && github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

env:
  MAKEFLAGS: -j2
