{"project": "exact-real", "project_url": "https://github.com/flatsurf/exact-real", "show_commit_url": "https://github.com/flatsurf/exact-real/commit/", "hash_length": 8, "revision_to_hash": {"0": "22db0653096459ba74b6ff25b85fa404a54a7884", "21": "f43a2a1c1a5d5a0c6e98ae7353514efc35b7ef0b", "55": "1a805981dabc48cca22fd5f603a5ecf7322cad38", "57": "302fccd9021c180fbc9fcf95158978f5e321dff7", "79": "205964d568bf33da5cce663b211c06c51f796ade", "80": "72cff9a2e8156518c2142ea1c7c9274b14beaac3", "85": "da0b1a5aed1a628fa9dca45b96791fb2d7955d51", "87": "8ec28a4d686067dacbb5482b714ee09755a0c070", "89": "65b73ae5895d17f1bcfef139896df0656b72368a", "91": "a38f00575eabf96d1feff38cb3734ab1ff58805d", "96": "83a69ce48c383852f5a1d8ea21a0b38591c8bc3c", "99": "a1782e5c4c7c7fe885e616ac9a330de8258d4f8b", "102": "d2b52ba0889d532df652814cd5ed7faedf6f7801", "105": "1c5cb2f26cff1fa485e6f93d9bd2f68645093d3e", "108": "a2a93f18f608927d3d77a33129271024e38c3729", "113": "4033ae0206b392d77d79e65f6a6aaf720810a1d4", "115": "efa9a6169ee31f18c0b685320de8f840f1baa0bd", "118": "6334119f3e00a41b9d53d300248eb753c2624319", "121": "79a595e878e35a5c4480eba37c84d6ece3e89442", "133": "cd2b2773b3c4fba2e5c41984712dcc98eb73b5ea", "147": "5eac0245e7c5e30ad9710c639e2defc9ba8646f7", "149": "619e6931dbc9278d7640dcb7af55116d4377f13b", "153": "49bb7514c95dadd1e904edff42fb65e8d7967563", "156": "9ce1dac8dc4806a7f686fba1f8bfa5e4becc54fe", "158": "215440a376cf631421bd9894c63106ecf8564aee", "175": "fdc4a2bcec104e0dda949355e74116c0e2865f5e", "178": "a873f83947929a2f9bb36ec98f67132a0d4414fd", "181": "ff2c433ed8dc226bd73f02162d7e6ddfe4cd0cb4", "184": "8cda2fa57c6a176ca973e03ba0205e73489a1bb0", "225": "3213bd812d58c0c13b2f249c66854e2fbab53f7e", "229": "5753df757d988b32df0e622c5f4062391d82fd70", "230": "a13b0948bd85a08c6b36036cc71569bc0ffb5357", "234": "d18d01642c9389e69a40d06dffe3a2aee7592a63", "248": "cc2feddd9ac6b6c5d9cec86c3ed20cedf0f1595c", "265": "6703e71a049163e37b9d697bceede0238be0a096", "267": "8ae7ae165482ce849602c62811e1014c60a7ded0", "269": "d7d884fd25e2763eb1b3742162b8db09cee689cc", "271": "608863e9042753e777c4962a9d6d76de0f733351", "274": "ebdb39ed103d3db305949385de0cf192e35d8aaf", "276": "f57965dd020b651c9573e109de993be9d0d2e938", "278": "5cc1abf6e30e90e74aa87fd2ff9bfa4d741fe714", "279": "c9e56bbb5f9a1324cfa19b58e394527992655782", "288": "e52448d361255f88a0e1c761dfe7a0cc8f73ccba", "292": "92508568d6d6a33f2707eb0964ecc81346e4eadb", "300": "011cd3572af3628f9de2d632799200b008ef1022", "314": "943e31b80d1b2a1c917753f6182ecb2af3244617", "317": "1b305188b4324f240a87cf8bfc56bcbf28c39ad8", "325": "7ba0973db4ced75687c370ca366225c3af80f19e", "328": "a5e7b109000d5c7eaea11b476c8f133879cd627d", "337": "dd78896092760736a429f9bf972c00a8f134d973", "341": "4952120cba9578398da3f3572484cf7dca1d2fb6", "347": "48fc3401e485588e45f8a78b75c79ad0e41159bb", "350": "c4b3dad84ae79ab28656a14c79accf6cd6687070", "353": "3c139ad31b31727fc1e54afbc7b6690982926efe", "360": "98b51d7eb716795cd1b1d21c48efc8445b79052b", "365": "c7d1e844a008b26ce650f9751244996ae54fbaf1", "384": "887f6ec420d94a6ee0eb825c9bb365f8c1b4ce67", "391": "ca370edf15ada273d291fbe1bfb74167588223c3", "396": "7fb03c9015a0434e2944fbe3099c859a6b807590", "400": "33759b28546dd9d75635af5d5f5e122d820950c5", "403": "cf1cb5e880271bb6e81c03477699773b93fc49f7", "410": "420e51fe0ba11836ecb79beaa55e77dd1a7ccffe", "415": "ec2c075a3e808cc58dc35f28ba69891b757e6779", "421": "dbf77d570128c81048a79000a394fb3cdf98e600", "423": "bceb96e97d4e13c0015521b8d9dfdc6c1b557bba", "427": "5017801a7bbfe11343ddd55ca4d31974295ac673", "429": "71de519071bc3b9aedb5d4472ac91496db11c691", "432": "35c0c0ee02af044707f5df3676c25ec571b56229", "434": "977f96cc41d07f8164046d0146ca9727235b7b51", "441": "1c8fde09bbffd6f982da017b32208854224f5ab1", "443": "ab737a6867be6a116c87cb2ca49b916790620740", "450": "0ac9cc74ebe52773630bb8594c1fb96ad31b60d3", "452": "77e452b21f1cca1895644b887f492fa6caa86c08", "456": "73978e0f1c7238038c3a9c5056eaca3dad44516c", "458": "8f28174ba88b6490487e8e0092ddf8106e9b27c0", "461": "ef7ec7c46c84b3a955d20b3a847ac0dc6480d0ab", "462": "1c05a6156d74a5219d8427f1e0d6ec0e45e94b18", "470": "8cb02284a428129d4249f0e92118960158adbb20", "472": "2e44f5eeb2261b75806754da35d88416b8cc2618", "481": "8e0fadd0f181c8b41e3b8357539351213f1ab51c", "483": "26dc64a79878738d494244e4b2855ecc0a011265", "486": "c4cba841910d490e12e54ca85fdf8d173b3e0cee", "489": "c68e6cba9d26e79b485c36c64462c315102bb307", "491": "d0f5c33efd6df7f5bc93783f6391bbc6589da788", "500": "0d330e1ab914400220e4d8d867f307bdf4033ab9", "502": "4942e4b95c04f7f81c0560f7f189c1e698e1e2ed", "506": "595debc13f61eb4c133478ba3182673725c02b72", "508": "b22ae4b5aab5671ba2efa6e6ee111e9e516fa73d", "519": "c08a4b4952bb03596044f6b3eb5ba90534ff28c3", "521": "a08a58c5ab276cacc5de5173fe3dba4b53959d93", "524": "9612a8692cfa723f12cdef6ff5bf924a30a648a2", "526": "05e7e8d75434cdd12323efb5a102ac78fd1be920", "530": "f8a9d3e8a9afc774b0dd9198039b5268fc32a16f", "532": "d37617a50799a1dd216622f3cd07e9a92830de68", "536": "0943ee852759e1cabddd48cde0b44a7d09e6dc39", "537": "6dcf3daf58bb5fcf73a3440239367c1b1715c094", "538": "39c33dac6c24f107ae9d28d433331e55d1dd3fba", "547": "c023eb3097b765a8d9a229a156d5e8a4bfbd2d51", "551": "4a293ac8982c4a930264a3e58bc18f4309c13b5a", "553": "3777ce6b51d1fc499de2fd0aad9230efdfe97e05", "558": "bb3071086f0b62e39180fbec719c935319d8888b", "559": "44118a6cc20f18627ce323bd8b214f4839515e16", "562": "4af152445a7d7853dd1648fca63c986c659e46fc", "572": "41aa0b3bf4ff627341c968e1f817fe037f4320db", "577": "61706c663ac1526825dbf810f4e4e1ab3fb0c7d2", "581": "3ecaf6f98108e82f3122661bde43ace4f9ee7048", "583": "383697148a7b92b837d94618c4b7c73daf1701bf", "588": "ce09d45977c6b78023e45c9da496bdcb983252e3", "598": "ddee515aeb516ffcd02fb33683eb89897b05354a", "607": "0981d7262e618d5844881f087a4ccf2eeaa76e79", "612": "bc15c429a79ea409566f5fe4759b11febd6b1d6d", "616": "e1834b8bee93ac44b715c576c9e0df37ca2632d3", "621": "c2401719f99731cd246551cfe2fb21a3ef83daea", "627": "6438f2150f23372fca57a0e18108cb13c08fdab1", "630": "ee347cd648517b28d02069a4111f5fc941b6026d", "633": "015592f7f94eb487f5c671e5a4180c040da79e5b", "637": "61dc63765410a79ff41be1fec360888252b96405", "641": "1ee28fad9e81c53d3afea0b7b0b05fd5e6f83080", "645": "7f41d21dbe465cde5425aec8225f5e6b5d4fa7eb", "649": "8035f6b2289e0382dc5dd658204f790395c3b27e", "673": "337594916bbddf52da9d053a94edeb51026a74ca", "678": "b341acba261138b119c18b47d7937528916523fb", "682": "eb61570f93ca4ec9a2df2d27cafaefcaf30dc3ac", "686": "dfb6212b61979418a4e9588be1a3aa74bfc4894d", "766": "6894a8d50fc9aa026e32870d0ff022396c190dc8", "771": "7b667701737735a015bdd96a4335d50e0e3f4c25", "775": "54011fda3f0b726c6673fdcf887d16ef7d352255", "781": "c989bf0aa784b8a17abf99c25e11ebbc26348b19", "787": "1d13e21a9e9524a1359efa4ad71b04ef56745a41", "792": "dac723858fbc408ab25d8f6cb430d299538a427c", "820": "dbd6574025b66b6a670572abc8380fba60d8fa0d", "828": "900f7491ec67ea7111bb8ea870e4777a4bd5f65e", "832": "8614b363d35beee95148e10cb6688f20e8b27e25", "837": "75a2825cdcc011ae9097a36418a781c746673f55", "851": "5de2417cd444fb0ef475a22ded99af6e38b207c5", "870": "84c6f687044f3fa2e95efa0209099fd00915e02e", "875": "ecfdeb14f71c390dcac88b20067c0527996bd14b", "893": "6112d626344c7dca640885b663153040aae71a11", "904": "d3c69896212d73e9f70f46995cba9dad05814796", "910": "db2f51d2d6010f95df0fd708a313fe370dac1781", "914": "8583304debb6384257b01d4790df2be70af1fd28", "918": "915f277831d8371d433cf56cd1736c593705adfe", "923": "73d4be3c0746dbe19cc93cf587f3db1abc26c07c"}, "revision_to_date": {"0": 1552755645000, "21": 1556145122000, "55": 1556314113000, "57": 1556365775000, "79": 1558125094000, "80": 1558125315000, "85": 1558140125000, "87": 1558141235000, "89": 1558215380000, "91": 1558224202000, "96": 1558452431000, "99": 1558453833000, "102": 1558567882000, "105": 1558571562000, "108": 1559221589000, "113": 1560979065000, "115": 1560981199000, "118": 1561067515000, "121": 1561073153000, "133": 1562779958000, "147": 1563263025000, "149": 1563264151000, "153": 1563910792000, "156": 1563986578000, "158": 1564037342000, "175": 1564415099000, "178": 1564933972000, "181": 1565478336000, "184": 1565481848000, "225": 1569946257000, "229": 1570207208000, "230": 1570208368000, "234": 1570269230000, "248": 1570387083000, "265": 1570628537000, "267": 1570635241000, "269": 1570654553000, "271": 1570658608000, "274": 1570663787000, "276": 1570666725000, "278": 1570872735000, "279": 1570872959000, "288": 1572842847000, "292": 1573810822000, "300": 1580170856000, "314": 1580375404000, "317": 1580559264000, "325": 1580599782000, "328": 1582848314000, "337": 1585048217000, "341": 1592770718000, "347": 1593430203000, "350": 1593883145000, "353": 1594387608000, "360": 1594468330000, "365": 1596962256000, "384": 1597511425000, "391": 1597532236000, "396": 1597565634000, "400": 1597703226000, "403": 1597779225000, "410": 1597843701000, "415": 1598195737000, "421": 1598531611000, "423": 1598572420000, "427": 1598614541000, "429": 1598614628000, "432": 1598620155000, "434": 1598620203000, "441": 1598710322000, "443": 1598710403000, "450": 1598829529000, "452": 1598829619000, "456": 1598995651000, "458": 1598995750000, "461": 1599219154000, "462": 1599219603000, "470": 1599226237000, "472": 1599226322000, "481": 1600684972000, "483": 1600685330000, "486": 1601559273000, "489": 1601854971000, "491": 1601856962000, "500": 1602987262000, "502": 1602987380000, "506": 1603752930000, "508": 1603752993000, "519": 1604532849000, "521": 1604678183000, "524": 1604802469000, "526": 1604802537000, "530": 1604981236000, "532": 1604981394000, "536": 1609150034000, "537": 1609150281000, "538": 1609150307000, "547": 1609195417000, "551": 1609197368000, "553": 1609197536000, "558": 1610805620000, "559": 1610805702000, "562": 1610806065000, "572": 1610829045000, "577": 1610919489000, "581": 1610980197000, "583": 1610980298000, "588": 1611848236000, "598": 1611997257000, "607": 1612013406000, "612": 1612045398000, "616": 1612448727000, "621": 1612450014000, "627": 1623836664000, "630": 1623836739000, "633": 1623837311000, "637": 1625218406000, "641": 1625489486000, "645": 1625659539000, "649": 1627402689000, "673": 1629297720000, "678": 1629306074000, "682": 1629379225000, "686": 1629391623000, "766": 1632492677000, "771": 1636328346000, "775": 1636369204000, "781": 1636370159000, "787": 1636568479000, "792": 1642401350000, "820": 1642449233000, "828": 1642477605000, "832": 1642625260000, "837": 1642638860000, "851": 1642656067000, "870": 1642920143000, "875": 1643930567000, "893": 1667124635000, "904": 1670372319000, "910": 1670787917000, "914": 1670866029000, "918": 1673619920000, "923": 1673647824000}, "params": {"arch": ["x86_64"], "cpu": ["Standard_DS2_v2"], "machine": ["Azure"], "os": ["Linux"], "ram": ["61830880"], "python": ["", "3.7"], "Cython": ["", null], "arb": ["", null], "automake": [""], "benchmark==1.5.0": [""], "boost-cpp": [""], "e-antic": ["", null], "gmp": [""], "gtest": ["", null], "libtool": [""], "make": [""], "benchmark==1.4.1": ["", null], "ccache": [""], "coreutils": [""], "cppasv": ["", null], "cppyy": ["", "2.2.0"], "cppyythonizations": [""], "cxx-compiler": [""], "gmpxxll": [""], "gmpxxyy": [""], "libflint": [""], "ppl": [""], "pytest": [""], "setuptools": [""], "pip+cppasv": ["", null], "libeantic": ["1.0.3", null], "fmt": ["", null], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "", "automake": "", "benchmark==1.5.0": "", "boost-cpp": "", "ccache": "", "coreutils": "", "cppasv": "", "cppyy": "", "cppyythonizations": "", "cxx-compiler": "", "e-antic": "", "gmp": "", "gmpxxll": "", "gmpxxyy": "", "libflint": "", "libtool": "", "make": "", "ppl": "", "pytest": "", "setuptools": "", "branch": "master", "Cython": null, "arb": null, "gtest": null, "benchmark==1.4.1": null, "pip+cppasv": null, "libeantic": null, "fmt": null}, {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "", "automake": "", "benchmark==1.5.0": "", "boost-cpp": "", "ccache": "", "coreutils": "", "pip+cppasv": "", "cppyy": "2.2.0", "cppyythonizations": "", "cxx-compiler": "", "libeantic": "1.0.3", "gmp": "", "gmpxxll": "", "gmpxxyy": "", "libflint": "", "libtool": "", "make": "", "ppl": "", "pytest": "", "setuptools": "", "branch": "master", "Cython": null, "arb": null, "e-antic": null, "gtest": null, "benchmark==1.4.1": null, "cppasv": null, "fmt": null}, {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "", "automake": "", "benchmark==1.5.0": "", "boost-cpp": "", "ccache": "", "coreutils": "", "cppasv": "", "cppyy": "", "cppyythonizations": "", "cxx-compiler": "", "e-antic": "", "fmt": "", "gmp": "", "gmpxxll": "", "gmpxxyy": "", "libflint": "", "libtool": "", "make": "", "ppl": "", "pytest": "", "setuptools": "", "branch": "master", "Cython": null, "arb": null, "gtest": null, "benchmark==1.4.1": null, "pip+cppasv": null, "libeantic": null}], "benchmarks": {"ArbBenchmark.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "ArbBenchmark.track_time", "param_names": ["param1"], "params": [["'Create'", "'CreateMove, 53, 10'", "'CreateMove, 65536, 1024'", "'CreateCopy, 53, 10'", "'CreateCopy, 65536, 1024'", "'Assign_C, 53, 10'", "'Assign_C, 65536, 1024'", "'Assign, 53, 10'", "'Assign, 65536, 1024'", "'AssignMove, 53, 10'", "'AssignMove, 65536, 1024'", "'Addition_Inplace_Yap, 53, 10'", "'Addition_Inplace_Yap, 65536, 1024'", "'Addition_Yap, 53, 10'", "'Addition_Yap, 65536, 1024'", "'Addition_C, 53, 10'", "'Addition_C, 65536, 1024'", "'Arithmetic_Yap, 53, 10'", "'Arithmetic_Yap, 65536, 1024'", "'Arithmetic_C, 53, 10'", "'Arithmetic_C, 65536, 1024'", "'Arithmetic_C_optimized, 53, 10'", "'Arithmetic_C_optimized, 65536, 1024'"]], "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "ElementBenchmark\u27e8IntegerRing\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "ElementBenchmark\u27e8IntegerRing\u27e9.track_time", "param_names": ["param1"], "params": [["'addition_Z, 0'", "'addition_Z, 1, 1, 1'", "'addition_Z, 2, 1, 0, 0, 1'", "'addition_Z, 2, 3, 4, 1, 2'", "'multiplication_Z, 0'", "'multiplication_Z, 1, 1, 1'", "'multiplication_Z, 2, 1, 0, 0, 1'", "'multiplication_Z, 2, 3, 4, 1, 2'", "'square_Z, 0'", "'square_Z, 1, 1, 1'", "'square_Z, 2, 1, 0, 0, 1'", "'square_Z, 2, 3, 4, 1, 2'", "'truediv_Z, 0'", "'truediv_Z, 1, 1, 1'", "'truediv_Z, 2, 1, 0, 0, 1'", "'truediv_Z, 2, 3, 4, 1, 2'", "'floordiv_Z, 0'", "'floordiv_Z, 1, 1, 1'", "'floordiv_Z, 2, 1, 0, 0, 1'", "'floordiv_Z, 2, 3, 4, 1, 2'", "'arb_Z, 0'", "'arb_Z, 1, 1, 1'", "'arb_Z, 2, 1, 0, 0, 1'", "'arb_Z, 2, 3, 4, 1, 2'"]], "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "ElementBenchmark\u27e8NumberField\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "ElementBenchmark\u27e8NumberField\u27e9.track_time", "param_names": ["param1"], "params": [["'addition_K, 0'", "'addition_K, 1, 1, 1'", "'addition_K, 2, 1, 0, 0, 1'", "'addition_K, 2, 3, 4, 1, 2'", "'multiplication_K, 0'", "'multiplication_K, 1, 1, 1'", "'multiplication_K, 2, 1, 0, 0, 1'", "'multiplication_K, 2, 3, 4, 1, 2'", "'square_K, 0'", "'square_K, 1, 1, 1'", "'square_K, 2, 1, 0, 0, 1'", "'square_K, 2, 3, 4, 1, 2'", "'truediv_K, 0'", "'truediv_K, 1, 1, 1'", "'truediv_K, 2, 1, 0, 0, 1'", "'truediv_K, 2, 3, 4, 1, 2'", "'floordiv_K, 0'", "'floordiv_K, 1, 1, 1'", "'floordiv_K, 2, 1, 0, 0, 1'", "'floordiv_K, 2, 3, 4, 1, 2'", "'arb_K, 0'", "'arb_K, 1, 1, 1'", "'arb_K, 2, 1, 0, 0, 1'", "'arb_K, 2, 3, 4, 1, 2'"]], "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "ElementBenchmark\u27e8RationalField\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "ElementBenchmark\u27e8RationalField\u27e9.track_time", "param_names": ["param1"], "params": [["'addition_Q, 0'", "'addition_Q, 1, 1, 1'", "'addition_Q, 2, 1, 0, 0, 1'", "'addition_Q, 2, 3, 4, 1, 2'", "'multiplication_Q, 0'", "'multiplication_Q, 1, 1, 1'", "'multiplication_Q, 2, 1, 0, 0, 1'", "'multiplication_Q, 2, 3, 4, 1, 2'", "'square_Q, 0'", "'square_Q, 1, 1, 1'", "'square_Q, 2, 1, 0, 0, 1'", "'square_Q, 2, 3, 4, 1, 2'", "'truediv_Q, 0'", "'truediv_Q, 1, 1, 1'", "'truediv_Q, 2, 1, 0, 0, 1'", "'truediv_Q, 2, 3, 4, 1, 2'", "'floordiv_Q, 0'", "'floordiv_Q, 1, 1, 1'", "'floordiv_Q, 2, 1, 0, 0, 1'", "'floordiv_Q, 2, 3, 4, 1, 2'", "'arb_Q, 0'", "'arb_Q, 1, 1, 1'", "'arb_Q, 2, 1, 0, 0, 1'", "'arb_Q, 2, 3, 4, 1, 2'"]], "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "RandomRealNumberFixture.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "RandomRealNumberFixture.track_time", "param_names": ["param1"], "params": [["'Double'", "'arf, 16'", "'arf, 64'", "'arf, 512'", "'arf, 4096'", "'arf, 32768'", "'arf, 65536'"]], "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}}, "machines": {"Azure": {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "version": 1}}, "tags": {"0.0.1-alpha.0": 21, "0.0.1-alpha.1": 347, "1.0.0": 403, "1.0.1": 410, "1.0.2": 415, "1.1.0": 429, "1.1.1": 434, "1.2.0": 443, "1.2.1": 452, "1.3.0": 458, "1.3.1": 472, "1.3.2": 483, "1.4.0": 502, "1.4.1": 508, "1.4.2": 526, "1.4.3": 532, "1.5.0": 553, "1.5.1": 583, "1.6.0": 612, "1.6.1": 621, "2.0.0": 630, "2.1.0": 678, "2.2.0": 781, "2.2.1": 787, "2.3.0": 820, "3.0.0": 918, "v0.0.0-alpha": 0}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}